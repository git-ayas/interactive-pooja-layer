{"version":3,"sources":["components/HLSSource.js","components/VideoPlayer.js","App.js","serviceWorker.js","index.js"],"names":["HLSSource","props","context","hls","Hls","this","src","video","isSupported","loadSource","attachMedia","on","Events","MANIFEST_PARSED","play","destroy","type","Component","VideoPlayer","style","width","isVideoChild","url","position","App","state","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iSAIqBA,E,YACjB,WAAYC,EAAOC,GAAU,IAAD,8BACxB,4CAAMD,EAAOC,KACRC,IAAM,IAAIC,IAFS,E,iFAKP,IAAD,EACOC,KAAKJ,MAApBK,EADQ,EACRA,IAAKC,EADG,EACHA,MAETH,IAAII,gBACJH,KAAKF,IAAIM,WAAWH,GACpBD,KAAKF,IAAIO,YAAYH,GACrBF,KAAKF,IAAIQ,GAAGP,IAAIQ,OAAOC,iBAAiB,WACpCN,EAAMO,a,6CAOVT,KAAKF,KACLE,KAAKF,IAAIY,Y,+BAIP,IAAD,EACiBV,KAAKJ,MAAnBK,EADH,EACGA,IAAKU,EADR,EACQA,KACb,OACI,4BACIV,IAAKA,EACLU,KAAMA,GAAQ,8B,GA9BSC,aCcxBC,G,MAZK,SAAAjB,GAAK,OACrB,yBAAKkB,MAAO,CAACC,MAAM,SACf,kBAAC,SAAD,KACI,kBAAC,EAAD,CACIC,cAAY,EACZf,IAAKL,EAAMqB,MAEf,kBAAC,gBAAD,CAAeC,SAAS,eCMrBC,E,YAdb,WAAYvB,GAAO,IAAD,8BAChB,4CAAMA,KACDwB,MAAM,CACTH,IAAK,uJAHS,E,sEAOhB,OACE,oCACA,kBAAC,EAAD,CAAaA,IAAKjB,KAAKoB,MAAMH,W,GAVjBI,IAAMT,WCQJU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7fc93f4c.chunk.js","sourcesContent":["/* eslint-disable react/prop-types */\nimport React, { Component } from 'react';\nimport Hls from 'hls.js';\n\nexport default class HLSSource extends Component {\n    constructor(props, context) {\n        super(props, context);\n        this.hls = new Hls();\n    }\n\n    componentDidMount() {\n        const { src, video } = this.props;\n        // load hls video source base on hls.js\n        if (Hls.isSupported()) {\n            this.hls.loadSource(src);\n            this.hls.attachMedia(video);\n            this.hls.on(Hls.Events.MANIFEST_PARSED, () => {\n                video.play();\n            });\n        }\n    }\n\n    componentWillUnmount() {\n        // destroy hls video source\n        if (this.hls) {\n            this.hls.destroy();\n        }\n    }\n\n    render() {\n        const { src, type } = this.props;\n        return (\n            <source\n                src={src}\n                type={type || 'application/x-mpegURL'}\n            />\n        );\n    }\n}\n","import React from 'react';\nimport { Player, BigPlayButton } from 'video-react';\n\nimport HLSSource from './HLSSource';\nimport 'video-react/dist/video-react.css';\n\nconst VideoPlayer = props => (\n    <div style={{width:'100%'}}>\n        <Player>\n            <HLSSource\n                isVideoChild\n                src={props.url}\n            />\n            <BigPlayButton position=\"center\" />\n        </Player>\n    </div>\n);\n\nexport default VideoPlayer;\n","import React from 'react';\nimport './App.css';\nimport VideoPlayer from './components/VideoPlayer';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      url: 'https://d2z1ipo7vzwqbx.cloudfront.net/channel-shree-siddhivinayak/Shree-Siddhivinayak-Dhoop-Aarti/2d/Siddhivinayak_DhoopAarti_1280x720_60F_20M.m3u8'\n    }\n  }\n  render(){\n    return(\n      <>\n      <VideoPlayer url={this.state.url}/>\n      </>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}